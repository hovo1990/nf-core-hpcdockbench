#!/pro/icm/icms/icm64 -s
HELP = """
    Script: matching_fraction.icm

    Description:
        Calculates the matching fraction between a reference ligand structure and a docked pose
        using ICM. The result is exported as an SDF file.

    Usage:
        $P -ic=<ligand_structure.sdf> -id=<docked_pose.sdf> -o=<output_file.sdf>

    Parameters:
        -ic : Path to the reference ligand structure (.icm file)
        -id : Path to the docked pose (.icm file)
        -o  : Output file name for the matching fraction results (.sdf)

"""

if (Getarg(help)) quit HELP
l_commands = Getarg("-v",no,delete)


s_cocrystal_pose = Getarg("-ic","UNDEFINED",delete)
s_docked_pose = Getarg("-id","UNDEFINED",delete)
s_output_file = Getarg("-o","UNDEFINED",delete)

n_proc = Getarg("-nproc",4,delete)





#-- ! mo need for that output will be in docking prokect folder
#output_to_save_arg = Getarg("-o","UNDEFINED",delete)

# check if file exists
if(!Exist(s_cocrystal_pose read)) quit " Error_$P: file '" s_cocrystal_pose "' not found or not readable."
if(!Exist(s_docked_pose  read)) quit " Error_$P: file '" s_docked_pose  "' not found or not readable."


# -- * start debug part
# quit 1
# exit


#-- ? End of argument section
call _startup
call _macro

if (Error()) then
  printf error " Error> could not load necessary module\n"
  quit 1
endif


# #-- * this can be buggy need to fix this
# call s_icmhome + "_startup"

exit

read table mol s_cocrystal_pose name="cocrystal_t"
read table mol s_docked_pose name="docked_t"


# -- * Extract the cocrystal pose for analysis

if( Type( cocrystal_t.crysym ) == "sarray" ) then
  read mol input = Sum( Sarray( cocrystal_t.mol [1t] ) + Sarray(Nof(1),"> <crysym>\\n") + Sarray( cocrystal_t.crysym [1] ) + Sarray(Nof(1),"\\n\\n") , "$$$$\\n" )
else
  parrayToMol cocrystal_t.mol [ 1 ]
endif


# -- * Extract the docked pose for analysis

if( Type( docked_t.crysym ) == "sarray" ) then
  read mol input = Sum( Sarray( docked_t.mol [1t] ) + Sarray(Nof(1),"> <crysym>\\n") + Sarray( docked_t.crysym [1] ) + Sarray(Nof(1),"\\n\\n") , "$$$$\\n" )
else
  parrayToMol docked_t.mol [ 1 ]
endif

if (Error()) then
  printf error " Error> Loading the necessary objects for further analysis\n"
  quit 1
endif



# -- * Calculate RMSDs
dock_lig = a_TMPOB.m
crystal_lig = a_1.m
curr_RMSD_in_place = Srmsd ( dock_lig crystal_lig chemical ) #-- * does not superimpose

if (Exist(curr_RMSD_in_place)==no) then
  curr_RMSD_in_place = -1
endif

curr_RMSD_superimposed = Rmsd ( dock_lig crystal_lig chemical )
if (Exist(curr_RMSD_superimposed)==no) then
  curr_RMSD_superimposed = -1
endif

# -- * add columns to the docked sdf table
add column docked_t curr_RMSD_in_place name='ICM_RMSD_IN_PLACE_'
add column docked_t curr_RMSD_superimposed  name='ICM_RMSD_SUPERIMPOSED_'


# -- * Calculate matching Fraction






if (Error()) then
  printf error " Error> Problems while calculating matching fraction\n"
  quit 1
endif





#-- * Do successful exit
quit 0



